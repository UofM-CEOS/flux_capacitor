#+STARTUP: content indent hideblocks
#+TITLE: Flux Capacitor: tools for gas flux analyses
#+AUTHOR:
#+OPTIONS: ^:{}
#+OPTIONS: toc:nil


Routines and tools to process flux (eddy covariance) data as collected by
our group.

* Basic usage

The package currently has 2 sub-packages:

- =eddycov=
- =underway=

=eddycov= is the eddy covariance package, and =underway= is for the
calculation of pCO2 from the underway system.

Both packages can be imported at once by:

#+BEGIN_SRC python :results silent :exports code
  import fluxer
#+END_SRC

whereby each sub-package's namespace is accessible via =fluxer.eddycov.*=
or =fluxer.underway.*=.

However, each package can be be imported individually, if needed:

#+BEGIN_SRC python :results silent :exports code
  import fluxer.eddycov as eddycov
#+END_SRC

Or

#+BEGIN_SRC python :results silent :exports code
  import fluxer.underway as underway
#+END_SRC

thus avoiding having to use the =fluxer.= prefix.


* Project configuration

The easiest way to use the packages is to set up a configuration for any
given project.  The source for =fluxer= includes the default configuration
settings required by each sub-package (under the =config/= directory).
These settings are specified in a =*.cfg= file (syntax instructions are
given in the default files).


* =eddycov= package

The main interface for this package is the two functions: =main= and
=flux_period=:

#+BEGIN_SRC python :results silent :exports code
  # The main() function takes a configuration file and runs the analyses
  from fluxer import eddycov
  eddycov.main("ec_config.cfg")
#+END_SRC

#+BEGIN_SRC python :results silent :exports code
  # The flux_period() function takes an input data file and a *parsed*
  # configuration file and runs the analysis for it
  from fluxer import eddycov
  from fluxer.flux_config import parse_config
  config = parse_config("ec_config.cfg")
  eddycov.flux_period("YYYYMMDD_100000_10hz.csv", config)
#+END_SRC

A third alternative is offered to allow execution from a command line:

#+BEGIN_SRC shell :results silent :exports code
  get_fluxes ec_config.cfg
#+END_SRC

* =underway= package

Consistent with =eddycov=, this package offers two functions: =main= and
=underway_pCO2=.

#+BEGIN_SRC python :results silent :exports code
  # The main() function takes a configuration file and runs the analyses
  from fluxer import underway
  underway.main("ec_config.cfg")
#+END_SRC

#+BEGIN_SRC python :results silent :exports code
  # The underway_pCO2() function takes an input data file and a *parsed*
  # configuration file and runs the analysis for it
  from fluxer import underway
  from fluxer.flux_config import parse_config
  config = parse_config("uw_config.cfg")
  eddycov.underway_pCO2("YYYYMMDD_100000_20min.csv", config)
#+END_SRC

It is also possible to perform the analysis from the shell command line:

#+BEGIN_SRC shell :results silent :exports code
  underway.py ec_config.cfg
#+END_SRC

* Eddy covariance processing

The first step is to correct data for ship motion effects:

#+BEGIN_SRC plantuml :file motion_correction_flowchart.png :exports results
  start
  title Motion correction flow chart
  :Transform IMU data to RHS;
  partition OpenPath {
  if (> 2% records missing
  open path CO2, H2O, or
  analyzer status measurements?) then (yes)
    #GoldenRod:open_flag=True>
  elseif (> 2% open path records
  with bad analyzer status) then (yes)
    #GoldenRod:open_flag=True>
  else
    :Vickers-Mahrt despike;
    if (>1% despiked records) then (yes)
    #GoldenRod:open_flag=True>
    endif
  endif
  }
  partition Sonic {
  if (> 2% records missing sonic measurements?) then (yes)
    #GoldenRod:sonic_flag=True>
  else
    :Vickers-Mahrt despike;
    if (>1% despiked records) then (yes)
    #GoldenRod:sonic_flag=True>
    endif
  endif
  }
  partition IMU {
  if (> 2% records missing IMU measurements?) then (yes)
    #GoldenRod:motion_flag=True>
  endif
  }
  partition ClosedPath {
  if (> 2% records missing closed path CO2, H2O or pressure measurements?) then (yes)
    #GoldenRod:closed_flag=True>
  else (no)
    :Vickers-Mahrt despike;
    if (>1% despiked records) then (yes)
    #GoldenRod:closed_flag=True>
    endif
  endif
  }
  :Gap fill COG, SOG, and heading via smoothing;
  if (Any missing navigation COG, SOG, or heading?) then (yes)
    #GoldenRod:motion_flag=True>
  endif
  if (Missing mean air temperature or relative humidity?) then (yes)
    #GoldenRod:bad_meteorology_flag=True>
  endif
  if (> 0.5% sonic W wind records > 7 m/s or
  > 0.5% sonic temperature records > 7 deg
  difference from mean MET temperature?) then (yes)
    #GoldenRod:sonic_flag=True>
    stop
  endif
  if (All COG, SOG, or heading missing?) then (yes)
    #GoldenRod:bad_navigation_flag=True>
    stop
  endif
  :Compute IMU tilt angles (roll and pitch) from linear acceleration;
  :Correct sonic wind speed for ship motion, with and without IMU tilt angles;
  end
#+END_SRC

[[file:motion_correction_flowchart.png]]
